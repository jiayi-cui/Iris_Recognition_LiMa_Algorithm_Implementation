tm_map(removePunctuation)%>%
tm_map(removeNumbers)%>%
tm_map(removeWords, character(0))%>%
tm_map(stripWhitespace)
stemmed <- tm_map(corpus, stemDocument) %>%
tidy() %>%
select(text)
dict <- tidy(corpus) %>%
select(text) %>%
unnest_tokens(dictionary, text)
temp <- bag_of_words %>%
count(gender, word) %>%
group_by(gender) %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(gender, proportion)
temp
temp <- bag_of_words %>%
count(gender, word) %>%
group_by(gender) %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(gender, proportion)
ggplot(temp,
aes_string(x = colnames(temp)[2], y = colnames(temp)[3]),
color = abs(colnames(temp)[3] - colnames(temp)[2])) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 1, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = percent_format()) +
scale_y_log10(labels = percent_format()) +
scale_color_gradient(limits = c(0, 0.001), low = "darkslategray4", high = "gray75") +
theme(legend.position="none")
gender_word <- bag_of_words %>%
count(gender, word) %>%
group_by(gender) %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(gender, proportion)
ggplot(gender_word,
aes_string(x = colnames(gender_word)[2], y = colnames(gender_word)[3]),
color = abs(colnames(gender_word)[3] - colnames(gender_word)[2])) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 1, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = percent_format()) +
scale_y_log10(labels = percent_format()) +
scale_color_gradient(limits = c(0, 0.001), low = "darkslategray4", high = "gray75") +
theme(legend.position="none")
class(bag_of_words)
colnames(hm_data)
colnames(demo_data)
marital_word <- bag_of_words %>%
count(marital, word) %>%
group_by(marital) %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(gender, proportion)
marital_word <- bag_of_words %>%
count(marital, word) %>%
group_by(marital) %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(marital, proportion)
ggplot(marital_word,
aes_string(x = colnames(marital_word)[2], y = colnames(marital_word)[3]),
color = abs(colnames(marital_word)[3] - colnames(marital_word)[2])) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 1, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = percent_format()) +
scale_y_log10(labels = percent_format()) +
scale_color_gradient(limits = c(0, 0.001), low = "darkslategray4", high = "gray75") +
theme(legend.position="none")
parent_word <- bag_of_words %>%
count(parenthood, word) %>%
group_by(parenthood) %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(parenthood, proportion)
ggplot(parent_word,
aes_string(x = colnames(parent_word)[2], y = colnames(parent_word)[3]),
color = abs(colnames(parent_word)[3] - colnames(parent_word)[2])) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 1, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = percent_format()) +
scale_y_log10(labels = percent_format()) +
scale_color_gradient(limits = c(0, 0.001), low = "darkslategray4", high = "gray75") +
theme(legend.position="none")
parent_word <- bag_of_words %>%
count(parenthood, word) %>%
group_by(parenthood) %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(parenthood, proportion)
ggplot(parent_word,
aes_string(x = colnames(parent_word)[2], y = colnames(parent_word)[3]),
color = abs(colnames(parent_word)[3] - colnames(parent_word)[2])) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 1, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = percent_format()) +
scale_y_log10(labels = percent_format()) +
scale_color_gradient(limits = c(0, 0.001), low = "darkslategray4", high = "gray75") +
theme(legend.position="none")
shinyApp(ui, server)
reflect_word <- bag_of_words %>%
count(reflection_period, word) %>%
group_by(reflection_period) %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(reflection_period, proportion)
ggplot(reflect_word,
aes_string(x = colnames(reflect_word)[2], y = colnames(reflect_word)[3]),
color = abs(colnames(reflect_word)[3] - colnames(reflect_word)[2])) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 1, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = percent_format()) +
scale_y_log10(labels = percent_format()) +
scale_color_gradient(limits = c(0, 0.001), low = "darkslategray4", high = "gray75") +
theme(legend.position="none")
reflect_word <- bag_of_words %>%
count(reflection_period, word) %>%
group_by(reflection_period) %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(reflection_period, proportion)
ggplot(reflect_word,
aes_string(x = colnames(reflect_word)[2], y = colnames(reflect_word)[3]),
color = abs(colnames(reflect_word)[3] - colnames(reflect_word)[2])) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 1, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = percent_format()) +
scale_y_log10(labels = percent_format()) +
scale_color_gradient(limits = c(0, 0.001), low = "darkslategray4", high = "gray75") +
theme(legend.position="none")
bag_of_words <- merge_data %>%
unnest_tokens(word, text)
hm_bigrams <- merge_data %>%
filter(count != 1) %>%
unnest_tokens(bigram, text, token = "ngrams", n = 2)
bigram_counts <- hm_bigrams %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
count(word1, word2, sort = TRUE)
hm_bigrams %>%
count(gender, bigram, sort = TRUE) %>%
group_by(gender) %>%
top_n(10) %>%
ungroup() %>%
mutate(bigram = reorder(bigram, n)) %>%
ggplot(aes(bigram, n, fill = !!as.name(selectedBigram()$var))) +
geom_col(show.legend = FALSE) +
facet_wrap(as.formula(paste("~", selectedBigram()$var)), ncol = 2, scales = "free") +
coord_flip()
hm_bigrams %>%
count(gender, bigram, sort = TRUE) %>%
group_by(gender) %>%
top_n(10) %>%
ungroup() %>%
mutate(bigram = reorder(bigram, n)) %>%
ggplot(aes(bigram, n, fill = gender)) +
geom_col(show.legend = FALSE) +
facet_wrap(as.formula(paste("~", gender, ncol = 2, scales = "free") +
coord_flip()
hm_bigrams %>%
count(gender, bigram, sort = TRUE) %>%
group_by(gender) %>%
top_n(10) %>%
ungroup() %>%
mutate(bigram = reorder(bigram, n))
ggplot(hm_bigrams, aes(bigram, n, fill = gender)) +
geom_col(show.legend = FALSE) +
facet_wrap(as.formula(paste("~", gender, ncol = 2, scales = "free") +
coord_flip()
hm_bigrams %>%
count(gender, bigram, sort = TRUE) %>%
group_by(gender) %>%
top_n(10) %>%
ungroup() %>%
mutate(bigram = reorder(bigram, n))
ggplot(hm_bigrams, aes(bigram, n, fill = gender)) +
geom_col(show.legend = FALSE) +
facet_wrap(as.formula(paste("~", gender, ncol = 2, scales = "free"))) +
coord_flip()
hm_bigrams %>%
count(gender, bigram, sort = TRUE) %>%
group_by(gender) %>%
top_n(10) %>%
ungroup() %>%
mutate(bigram = reorder(bigram, n))
ggplot(hm_bigrams, aes(bigram, n, fill = gender)) +
geom_col(show.legend = FALSE) +
facet_wrap(as.formula(paste("~", gender)), ncol = 2, scales = "free") +
coord_flip()
hm_bigrams %>%
count(gender, bigram, sort = TRUE) %>%
group_by(gender) %>%
top_n(10) %>%
ungroup() %>%
mutate(bigram = reorder(bigram, n)) %>%
ggplot(aes(bigram, n, fill = gender)) +
geom_col(show.legend = FALSE) +
facet_wrap(as.formula(paste("~", gender)), ncol = 2, scales = "free") +
coord_flip()
hm_bigrams
colnames(hm_bigrams)
hm_bigrams %>%
count(gender, bigram, sort = TRUE) %>%
group_by(gender) %>%
top_n(10) %>%
ungroup() %>%
mutate(bigram = reorder(bigram, n)) %>%
ggplot(aes(bigram, n, fill = gender)) +
geom_col(show.legend = FALSE) +
facet_wrap(.~gender, ncol = 2, scales = "free") +
coord_flip()
hm_bigrams
colnames(hm_bigrams)
hm_bigrams$bigram
hm_bigrams %>%
count(gender, bigram, sort = TRUE) %>%
group_by(gender) %>%
top_n(10) %>%
ungroup() %>%
mutate(bigram = reorder(bigram, n))
#ggplot(aes(bigram, n, fill = gender)) +
#     geom_col(show.legend = FALSE) +
#    facet_wrap(.~gender, ncol = 2, scales = "free") +
#   coord_flip()
hm_bigrams
gender_bigrams <- hm_bigrams %>%
count(gender, bigram, sort = TRUE) %>%
group_by(gender) %>%
top_n(10) %>%
ungroup() %>%
mutate(bigram = reorder(bigram, n))
#ggplot(aes(bigram, n, fill = gender)) +
#     geom_col(show.legend = FALSE) +
#    facet_wrap(.~gender, ncol = 2, scales = "free") +
#   coord_flip()
gender_bigrams
gender_bigrams <- hm_bigrams %>%
count(gender, bigram, sort = TRUE) %>%
group_by(gender) %>%
top_n(10) %>%
ungroup() %>%
mutate(bigram = reorder(bigram, n))
ggplot(data = gender_bigrams, aes(x = bigram, y = n)) + geom_bar(stat = 'identity') + facet_grid(.~gender) + coord_flip()
#ggplot(aes(bigram, n, fill = gender)) +
#     geom_col(show.legend = FALSE) +
#    facet_wrap(.~gender, ncol = 2, scales = "free") +
#   coord_flip()
#ggplot(data=word_ten,aes(x=count.word, y=count.n)) + geom_bar(stat = 'identity') + coord_flip()
gender_bigrams <- hm_bigrams %>%
count(gender, bigram, sort = TRUE) %>%
group_by(gender) %>%
top_n(10) %>%
ungroup() %>%
mutate(bigram = reorder(bigram, n))
ggplot(data = gender_bigrams, aes(x = bigram, y = n)) + geom_bar(stat = 'identity') + facet_grid(.~gender) + coord_flip()
gender_bigrams <- hm_bigrams %>%
count(gender, bigram, sort = TRUE) %>%
group_by(gender) %>%
top_n(10) %>%
ungroup() %>%
mutate(bigram = reorder(bigram, n))
ggplot(data = gender_bigrams, aes(x = bigram, y = n)) + geom_bar(stat = 'identity') + facet_grid(.~gender) + coord_flip()
colnames(hm_bigrams)
gender_bigrams <- hm_bigrams %>%
count(gender, bigram, sort = TRUE) %>%
group_by(gender) %>%
top_n(10) %>%
ungroup() %>%
mutate(bigram = reorder(bigram, n))
ggplot(data = gender_bigrams, aes(x = bigram, y = n)) + geom_bar(stat = 'identity') +
facet_grid(.~gender) + coord_flip()
marital_bigrams <- hm_bigrams %>%
count(marital, bigram, sort = TRUE) %>%
group_by(marital) %>%
top_n(10) %>%
ungroup() %>%
mutate(bigram = reorder(bigram, n))
ggplot(data = marital_bigrams, aes(x = bigram, y = n)) + geom_bar(stat = 'identity') +
facet_grid(.~marital) + coord_flip()
parent_bigrams <- hm_bigrams %>%
count(parenthood, bigram, sort = TRUE) %>%
group_by(parenthood) %>%
top_n(10) %>%
ungroup() %>%
mutate(bigram = reorder(bigram, n))
ggplot(data = parent_bigrams, aes(x = bigram, y = n)) + geom_bar(stat = 'identity') +
facet_grid(.~parenthood) + coord_flip()
reflect_bigrams <- hm_bigrams %>%
count(reflection_period, bigram, sort = TRUE) %>%
group_by(reflection_period) %>%
top_n(10) %>%
ungroup() %>%
mutate(bigram = reorder(bigram, n))
ggplot(data = reflect_bigrams, aes(x = bigram, y = n)) + geom_bar(stat = 'identity') +
facet_grid(.~reflection_period) + coord_flip()
reflect_bigrams <- hm_bigrams %>%
count(reflection_period, bigram, sort = TRUE) %>%
group_by(reflection_period) %>%
top_n(10) %>%
ungroup() %>%
mutate(bigram = reorder(bigram, n))
ggplot(data = reflect_bigrams, aes(x = bigram, y = n)) + geom_bar(stat = 'identity') +
facet_grid(.~reflection_period) + coord_flip()
knitr::opts_chunk$set(echo = TRUE)
library(tm)
library(tidytext)
library(tidyverse)
library(DT)
library(scales)
library(wordcloud2)
library(gridExtra)
library(ngram)
library(shiny)
library(ggplot2)
library(RColorBrewer)
library(wordcloud)
library(tm)
library(tidytext)
library(tidyverse)
library(DT)
library(scales)
library(wordcloud2)
library(gridExtra)
library(ngram)
library(shiny)
library(ggplot2)
library(RColorBrewer)
library(wordcloud)
urlfile_cleansed<-'https://raw.githubusercontent.com/rit-public/HappyDB/master/happydb/data/cleaned_hm.csv'
hm_data <- read_csv(urlfile_cleansed)
urlfile_demo<-'https://raw.githubusercontent.com/rit-public/HappyDB/master/happydb/data/demographic.csv'
demo_data <- read_csv(urlfile_demo)
corpus <- VCorpus(VectorSource(hm_data$cleaned_hm))%>%
tm_map(content_transformer(tolower))%>%
tm_map(removePunctuation)%>%
tm_map(removeNumbers)%>%
tm_map(removeWords, character(0))%>%
tm_map(stripWhitespace)
stemmed <- tm_map(corpus, stemDocument) %>%
tidy() %>%
select(text)
dict <- tidy(corpus) %>%
select(text) %>%
unnest_tokens(dictionary, text)
data("stop_words")
word <- c("happy","ago","yesterday","lot","today","months","month",
"happier","happiest","last","week","past")
stop_words <- stop_words %>%
bind_rows(mutate(tibble(word), lexicon = "updated"))
completed <- stemmed %>%
mutate(id = row_number()) %>%
unnest_tokens(stems, text) %>%
bind_cols(dict) %>%
anti_join(stop_words, by = c("dictionary" = "word"))
completed <- completed %>%
group_by(stems) %>%
count(dictionary) %>%
mutate(word = dictionary[which.max(n)]) %>%
ungroup() %>%
select(stems, word) %>%
distinct() %>%
right_join(completed) %>%
select(-stems)
completed <- completed %>%
group_by(id) %>%
summarise(text = str_c(word, collapse = " ")) %>%
ungroup()
hm_data <- hm_data %>%
mutate(id = row_number()) %>%
inner_join(completed)
write_csv(hm_data, "../output/processed_moments.csv")
merge_data <- hm_data %>%
inner_join(demo_data, by = "wid") %>%
select(wid,
original_hm,
gender,
marital,
parenthood,
reflection_period,
age,
country,
ground_truth_category,
text) %>%
mutate(count = sapply(hm_data$text, wordcount)) %>%
filter(gender %in% c("m", "f")) %>%
filter(marital %in% c("single", "married")) %>%
filter(parenthood %in% c("n", "y")) %>%
filter(reflection_period %in% c("24h", "3m")) %>%
mutate(reflection_period = fct_recode(reflection_period,
months_3 = "3m", hours_24 = "24h"))
bag_of_words <- merge_data %>%
unnest_tokens(word, text)
hm_bigrams <- merge_data %>%
filter(count != 1) %>%
unnest_tokens(bigram, text, token = "ngrams", n = 2)
bigram_counts <- hm_bigrams %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
count(word1, word2, sort = TRUE)
word_count <- merge_data %>%
unnest_tokens(word, text) %>%
count(word, sort = TRUE)
word_df <- data.frame(word = names(word_count), count = word_count)
word_50 <- word_df[1:50,]
mycolors <- brewer.pal(8, 'Dark2')
wordcloud(word_50$count.word,word_df$count.n, random.order = FALSE, random.color= FALSE, colors = mycolors)
word_ten <- word_df[1:10,]
ggplot(data=word_ten,aes(x=count.word, y=count.n)) + geom_bar(stat = 'identity') + coord_flip()
gender_word <- bag_of_words %>%
count(gender, word) %>%
group_by(gender) %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(gender, proportion)
ggplot(gender_word,
aes_string(x = colnames(gender_word)[2], y = colnames(gender_word)[3]),
color = abs(colnames(gender_word)[3] - colnames(gender_word)[2])) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 1, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = percent_format()) +
scale_y_log10(labels = percent_format()) +
scale_color_gradient(limits = c(0, 0.001), low = "darkslategray4", high = "gray75") +
theme(legend.position="none")
marital_word <- bag_of_words %>%
count(marital, word) %>%
group_by(marital) %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(marital, proportion)
ggplot(marital_word,
aes_string(x = colnames(marital_word)[2], y = colnames(marital_word)[3]),
color = abs(colnames(marital_word)[3] - colnames(marital_word)[2])) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 1, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = percent_format()) +
scale_y_log10(labels = percent_format()) +
scale_color_gradient(limits = c(0, 0.001), low = "darkslategray4", high = "gray75") +
theme(legend.position="none")
parent_word <- bag_of_words %>%
count(parenthood, word) %>%
group_by(parenthood) %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(parenthood, proportion)
ggplot(parent_word,
aes_string(x = colnames(parent_word)[2], y = colnames(parent_word)[3]),
color = abs(colnames(parent_word)[3] - colnames(parent_word)[2])) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 1, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = percent_format()) +
scale_y_log10(labels = percent_format()) +
scale_color_gradient(limits = c(0, 0.001), low = "darkslategray4", high = "gray75") +
theme(legend.position="none")
reflect_word <- bag_of_words %>%
count(reflection_period, word) %>%
group_by(reflection_period) %>%
mutate(proportion = n / sum(n)) %>%
select(-n) %>%
spread(reflection_period, proportion)
ggplot(reflect_word,
aes_string(x = colnames(reflect_word)[2], y = colnames(reflect_word)[3]),
color = abs(colnames(reflect_word)[3] - colnames(reflect_word)[2])) +
geom_abline(color = "gray40", lty = 2) +
geom_jitter(alpha = 0.1, size = 1, width = 0.3, height = 0.3) +
geom_text(aes(label = word), check_overlap = TRUE, vjust = 1.5) +
scale_x_log10(labels = percent_format()) +
scale_y_log10(labels = percent_format()) +
scale_color_gradient(limits = c(0, 0.001), low = "darkslategray4", high = "gray75") +
theme(legend.position="none")
gender_bigrams <- hm_bigrams %>%
count(gender, bigram, sort = TRUE) %>%
group_by(gender) %>%
top_n(10) %>%
ungroup() %>%
mutate(bigram = reorder(bigram, n))
ggplot(data = gender_bigrams, aes(x = bigram, y = n)) + geom_bar(stat = 'identity') +
facet_grid(.~gender) + coord_flip()
marital_bigrams <- hm_bigrams %>%
count(marital, bigram, sort = TRUE) %>%
group_by(marital) %>%
top_n(10) %>%
ungroup() %>%
mutate(bigram = reorder(bigram, n))
ggplot(data = marital_bigrams, aes(x = bigram, y = n)) + geom_bar(stat = 'identity') +
facet_grid(.~marital) + coord_flip()
parent_bigrams <- hm_bigrams %>%
count(parenthood, bigram, sort = TRUE) %>%
group_by(parenthood) %>%
top_n(10) %>%
ungroup() %>%
mutate(bigram = reorder(bigram, n))
ggplot(data = parent_bigrams, aes(x = bigram, y = n)) + geom_bar(stat = 'identity') +
facet_grid(.~parenthood) + coord_flip()
reflect_bigrams <- hm_bigrams %>%
count(reflection_period, bigram, sort = TRUE) %>%
group_by(reflection_period) %>%
top_n(10) %>%
ungroup() %>%
mutate(bigram = reorder(bigram, n))
ggplot(data = reflect_bigrams, aes(x = bigram, y = n)) + geom_bar(stat = 'identity') +
facet_grid(.~reflection_period) + coord_flip()
word_ten
